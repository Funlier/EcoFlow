<?php

declare(strict_types=1);

namespace MarjovanLier\EcoFlow;

use DateTime;
use DateTimeZone;
use Exception;
use JsonException;
use Random\RandomException;
use RuntimeException;
use SensitiveParameter;
use Symfony\Component\HttpClient\HttpClient;
use Symfony\Contracts\HttpClient\Exception\ClientExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\DecodingExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\RedirectionExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\ServerExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface;

/**
 * A PHP client library for interacting with the EcoFlow API.
 * Provides methods for generating signatures, making API requests, and managing device parameters.
 */
readonly class EcoFlow
{
    /**
     * Initialises a new instance of the EcoFlow class.
     *
     * @param string $accessKey The access key for authenticating with the EcoFlow API.
     * @param string $secretKey The secret key for authenticating with the EcoFlow API.
     *
     * @throws Exception If an error occurs during the initialisation of the EcoFlow object.
     *
     * @psalm-suppress PossiblyUnusedMethod
     */
    public function __construct(
        #[SensitiveParameter]
        private string $accessKey,
        #[SensitiveParameter]
        private string $secretKey
    ) {}


    /**
     * Generates a signature for the given nonce, timestamp, and data.
     *
     * The generated signature is used for authentication purposes in the EcoFlow API. It ensures the integrity and
     * security of the communication between the client and the API by verifying the authenticity of the request.
     *
     * The method follows these steps to generate the signature:
     * 1. Flattens the input `$data` array into a single-dimensional array using the `flattenData()` helper function.
     * 2. Sorts the flattened data array alphabetically by the keys using the `ksort()` function with the `SORT_STRING`
     * flag.
     * 3. Concatenates the flattened and sorted data array into a string using the `http_build_query()` function.
     * 4. Appends the access key, nonce, and timestamp to the concatenated string using the `sprintf()` function.
     * 5. Removes any leading ampersand (`&`) from the resulting base string using the `ltrim()` function.
     * 6. Encrypts the base string using the HMAC-SHA256 algorithm along with the secret key.
     * 7. Converts the resulting byte array into a hexadecimal string using the `bin2hex()` function.
     *
     * @param string $nonce The nonce value. This is a random string that is used once in each request to prevent
     *                          replay attacks.
     * @param string $timestamp The timestamp value. This is the current time in milliseconds.
     * @param array{
     *     sn?: string,
     *     cmdCode?: string,
     *     params?: array<string, string|int>
     * } $data The data to be included in the signature. This can include the serial number (sn), command code
     *     (cmdCode), and other parameters (params).
     *
     * @return string The generated signature. This is a hexadecimal string that is used for authentication in the
     *                EcoFlow API.
     *
     * @throws Exception If an error occurs during the generation of the signature.
     */
    public function generateSignature(string $nonce, string $timestamp, array $data): string
    {
        // Flatten, sort, and concatenate the data array.
        $flattenedData = $this->flattenData($data);
        ksort($flattenedData, SORT_STRING);

        // Concatenate accessKey, nonce, and timestamp.
        $signatureBase = http_build_query($flattenedData);
        $signatureBase .= sprintf('&accessKey=%s&nonce=%s&timestamp=%s', $this->accessKey, $nonce, $timestamp);

        $signatureBase = ltrim($signatureBase, '&');

        // Encrypt with HMAC-SHA256 and secretKey.
        $signatureBytes = hash_hmac('sha256', $signatureBase, $this->secretKey, true);

        // Convert bytes to hexadecimal string.
        return bin2hex($signatureBytes);
    }


    /**
     * Flattens a multidimensional array into a one-dimensional array with dot notation keys.
     *
     * This method is used to flatten a multidimensional array into a one-dimensional array. The keys of the
     * one-dimensional array are generated by concatenating the keys of the multidimensional array with a dot ('.').
     * The keys are prefixed with the provided prefix, if any. If the key is 0, it is replaced with an empty string.
     *
     * If the value of a key-value pair is an array, a recursive call is made to flatten the nested array. The nested
     * array is passed as the `$data` parameter, and the newly generated key is passed as the `$prefix` parameter.
     *
     * After processing all the key-value pairs, the method returns the `$flattened` array, which contains the
     * flattened version of the input `$data` array.
     *
     * @param array<int|string, array<int|string, array<int, string>|int|string>|string>|array<string, int|string> $data
     *
     * @return array<int|string, int|string> The flattened one-dimensional array with dot notation keys.
     */
    public function flattenData(array $data, string $prefix = ''): array
    {
        $flattened = [];

        foreach ($data as $key => $value) {
            if ($key === 0) {
                $key = '';
            }

            $newKey = $prefix === '' ? $key : sprintf('%s.%s', $prefix, $key);
            $newKey = is_string($newKey) ? rtrim($newKey, '.') : (string) $newKey;

            if (is_array($value)) {
                // Recursive call for nested arrays.
                $flattened = array_merge($flattened, $this->flattenData($value, $newKey));

                continue;
            }

            // Append to a flattened array.
            $flattened[$newKey] = $value;
        }

        return $flattened;
    }


    /**
     * Sends an HTTP request to the specified URL using the given method, headers, and parameters.
     *
     * This method is used to communicate with an external API or service by sending an HTTP request and receiving a
     * response. It allows the EcoFlow class to interact with other systems and retrieve or send data as needed.
     *
     * The method uses the Symfony HttpClient to create and send the request. The headers are marked as sensitive
     * parameters, which means they should be handled with care to prevent unauthorised access.
     *
     * If the request method is GET and parameters are provided, they are added to the query string of the URL. If the
     * request method is POST, PUT, or PATCH and parameters are provided, they are included in the body of the request.
     *
     * The response from the request is returned as an associative array. The array includes the response code,
     * message,
     * data, eagle eye trace ID, and transaction ID.
     *
     * @param string $url The URL to send the request to.
     * @param string $method The HTTP request method (GET, POST, PUT, PATCH, etc.).
     * @param array<string, string> $headers The headers to include with the request. These headers provide additional
     *                                                                 information about the request, such as
     *                                                                 authentication tokens or content type.
     * @param array<string, array<string, int|string>|string> $params [optional] The request parameters to send along
     *                                                                 with the request. These parameters can be used
     *                                                                 to pass data to the API or service being called.
     *
     * @return array{
     *      code: string,
     *      message?: string,
     *      data: array<mixed>,
     *      eagleEyeTraceId: string,
     *      tid: string
     *  } The response from the HTTP request as an associative array.
     *
     * @throws ClientExceptionInterface      If an error occurs when sending the request.
     * @throws DecodingExceptionInterface    If an error occurs when decoding the response.
     * @throws JsonException                 If an error occurs when encoding the request parameters to JSON.
     * @throws TransportExceptionInterface   If a network error occurs.
     * @throws RedirectionExceptionInterface If a redirection error occurs.
     * @throws ServerExceptionInterface      If a server error occurs.
     */
    public function makeRequest(
        string $url,
        string $method,
        #[SensitiveParameter]
        array $headers,
        array $params = []
    ): array {
        $httpClient = HttpClient::create();

        $options = ['headers' => $headers];

        if ($params !== [] && $method === 'GET') {
            $options['query'] = $params;
        }

        if ($params !== [] && in_array($method, ['POST', 'PUT', 'PATCH'], true)) {
            $options['body'] = json_encode($params, JSON_THROW_ON_ERROR);
        }

        /**
         * @var array{
         *       code: string,
         *       message?: string,
         *       data: array<int, array{sn?: string, deviceName?: string, online?: bool}>,
         *       eagleEyeTraceId: string,
         *       tid: string
         *   } $request
         */
        $request = $httpClient->request($method, $url, $options)->toArray();

        return $request;
    }


    /**
     * Retrieves all quota information for a specific device.
     *
     * This method retrieves all quota information for a specific device from the EcoFlow API. The device is
     * identified by its serial number, which is provided as an argument. The method generates a nonce and a timestamp,
     * which are used along with the device serial number to generate a signature. The signature is used for
     * authentication in the EcoFlow API.
     *
     * The method sends a GET request to the EcoFlow API with the generated signature and the device serial number. The
     * response from the API is returned as an associative array. If the response code is '0', the data from the
     * response is sorted and returned. If the response code is not '0', an exception is thrown with the response
     * message.
     *
     * @param string $deviceSN The serial number of the device.
     *
     * @return array<string, array<string, array<string, int>|int|string>|int|string> The quota information for the
     *                                                                                device. This is an associative
     *                                                                                array where the keys are the
     *                                                                                quota names and the values are
     *                                                                                the quota values.
     *
     * @psalm-suppress PossiblyUnusedMethod
     */
    public function getAllQuotaInfo(string $deviceSN): array
    {
        $nonce = $this->createNonce();
        $timestamp = $this->createTimestamp();

        $params = ['sn' => $deviceSN];

        $signature = $this->generateSignature($nonce, $timestamp, $params);

        $url = 'https://api-e.ecoflow.com/iot-open/sign/device/quota/all';
        $headers = [
            'accessKey' => $this->accessKey,
            'nonce' => $nonce,
            'sign' => $signature,
            'timestamp' => $timestamp,
        ];

        /**
         * @var array{
         *     code: string,
         *     message: string,
         *     data: array<string, int|string|array<string, int|string|array<string, int>>>
         * } $response
         */
        $response = $this->makeRequest($url, 'GET', $headers, $params);

        if ($response['code'] === '0') {
            $data = $response['data'];

            ksort($data, SORT_STRING);

            return $data;
        }

        throw new RuntimeException('Error getting all quota information: ' . $response['message']);
    }


    /**
     * Sets the parameters for a specific device using the EcoFlow API.
     *
     * This method sends a request to the EcoFlow API to update the settings of a specific device. It takes the
     * device's
     * serial number, a command code indicating the operation to be performed, and an optional array of parameters to
     * be
     * set for the device.
     *
     * The method generates a unique nonce and a timestamp, which are used along with the provided data to create a
     * signature for authentication purposes. It then constructs the necessary URL and headers for the API request.
     *
     * The method sends a PUT request to the EcoFlow API endpoint with the prepared data and headers. The API processes
     * the request and returns a response indicating the success or failure of the operation.
     *
     * The response from the API is analysed to determine the outcome of the operation. If the response contains a
     * 'code' key with a value of '0', it means the operation was successful, and the method returns a success message.
     * If the response includes a 'message' key, it indicates an error occurred, and the method returns an error
     * message along with the response message. If neither condition is met, a generic error message is returned.
     *
     * @param string $deviceSN The serial number of the device to be updated.
     * @param string $cmdCode The command code indicating the operation to be performed on the device.
     * @param array<string, int|string> $params [optional] An associative array containing the parameter names and
     *                                            their corresponding values to be set for the device. Defaults to an
     *                                            empty array.
     *
     * @return string A message indicating the success or failure of the operation. If successful, the message will be
     *                'Supply priority set successfully.'. If an error occurs, the message will include an error
     *                description and the response message from the API. If the response does not contain a specific
     *                error code or message, a generic error message will be returned.
     *
     * @throws DecodingExceptionInterface  If an error occurs while decoding the API response.
     * @throws TransportExceptionInterface If an error occurs during the API request.
     * @throws Exception                   If an error occurs while generating the nonce or signature.
     *
     * @psalm-suppress PossiblyUnusedMethod
     */
    public function setParams(string $deviceSN, string $cmdCode, array $params = []): string
    {
        $nonce = $this->createNonce();
        $timestamp = $this->createTimestamp();

        $data = [
            'cmdCode' => $cmdCode,
            'params' => $params,
            'sn' => $deviceSN,
        ];

        $signature = $this->generateSignature($nonce, $timestamp, $data);

        $url = 'https://api-e.ecoflow.com/iot-open/sign/device/quota';
        $headers = [
            'accessKey' => $this->accessKey,
            'Content-Type' => 'application/json;charset=UTF-8',
            'nonce' => $nonce,
            'sign' => $signature,
            'timestamp' => $timestamp,
        ];

        $response = $this->makeRequest($url, 'PUT', $headers, $data);

        if (isset($response['code']) && $response['code'] === '0') {
            return 'Supply priority set successfully.';
        }

        if (isset($response['message'])) {
            return 'Error setting supply priority: ' . $response['message'];
        }

        return 'Something went wrong';
    }


    /**
     * Retrieves the parameters for a specific device from the EcoFlow API.
     *
     * This method sends a request to the EcoFlow API to retrieve information about a particular device. It generates a
     * unique signature using the `generateSignature` method, which combines the access key, a randomly generated
     * nonce, a timestamp, and the provided device serial number and parameters.
     *
     * The method sends a POST request to the EcoFlow API endpoint with the generated signature, access key, nonce,
     * timestamp, and other required headers. The API responds with data about the device.
     *
     * If the API response contains a code of '0', the method returns a success message indicating that the supply
     * priority was retrieved successfully. If the response contains an error message, it returns an error message
     * along with the JSON-encoded API response. If the response doesn't have a code or message, it returns a generic
     * "Something went wrong" message with the JSON-encoded API response.
     *
     * @param string $deviceSN The serial number of the device.
     * @param array<string, int|string> $params Optional additional parameters for the request. This is an associative
     *                                            array where the keys are the parameter names and the values are the
     *                                            parameter values. Defaults to an empty array.
     *
     * @return string The result message indicating the success or failure of the operation. If the API response
     *                contains a code of '0', the message will be 'Supply priority retrieved successfully.'. If the
     *                response contains an error message, the message will be 'Error getting supply priority: '
     *                followed by the JSON-encoded API response. If the response doesn't have a code or message, the
     *                message will be 'Something  went wrong.' followed by the JSON-encoded API response.
     *
     * @throws ClientExceptionInterface      If an error occurs when sending the request.
     * @throws DecodingExceptionInterface    If an error occurs when decoding the response.
     * @throws JsonException                 If an error occurs when encoding the response to JSON.
     * @throws RandomException               If an error occurs when generating the nonce.
     * @throws RedirectionExceptionInterface If a redirection error occurs.
     * @throws ServerExceptionInterface      If a server error occurs.
     * @throws TransportExceptionInterface   If a network error occurs.
     *
     * @psalm-suppress PossiblyUnusedMethod
     */
    public function getParams(string $deviceSN, array $params = []): string
    {
        $nonce = $this->createNonce();
        $timestamp = $this->createTimestamp();
        $data = [
            'params' => $params,
            'sn' => $deviceSN,
        ];
        $signature = $this->generateSignature($nonce, $timestamp, $data);
        $url = 'https://api-e.ecoflow.com/iot-open/sign/device/quota';

        $headers = [
            'Accept' => 'application/json',
            'accessKey' => $this->accessKey,
            'Content-Type' => 'application/json;charset=UTF-8',
            'nonce' => $nonce,
            'sign' => $signature,
            'timestamp' => $timestamp,
        ];

        $response = $this->makeRequest($url, 'POST', $headers, $data);

        if (isset($response['code']) && $response['code'] === '0') {
            return 'Supply priority retrieved successfully.';
        }

        if (isset($response['message'])) {
            return 'Error getting supply priority: ' . json_encode($response, JSON_THROW_ON_ERROR);
        }

        return 'Something went wrong. ' . json_encode($response, JSON_THROW_ON_ERROR);
    }


    /**
     * Retrieves the list of devices from the EcoFlow API.
     *
     * This method retrieves the list of devices associated with the user's account from the EcoFlow API.
     * It generates a nonce and a timestamp, which are used to create a signature for authentication.
     *
     * The method sends a GET request to the EcoFlow API endpoint with the generated signature and retrieves
     * the response as an associative array. The response includes the following information:
     * - Response code
     * - Message (if any)
     * - Data (an array of device details)
     * - Eagle Eye Trace ID
     * - Transaction ID
     *
     * @return array{
     *      code: string,
     *      message?: string,
     *      data: array<int, array{
     *          sn?: string,
     *          deviceName?: string,
     *          online?: bool,
     *      }>,
     *      eagleEyeTraceId: string,
     *      tid: string
     *  } The list of devices. This is an associative array where the keys are the device attributes and the values are
     *    the attribute values.
     *
     * @psalm-suppress PossiblyUnusedMethod
     *
     * @throws DecodingExceptionInterface|Exception|RandomException|TransportExceptionInterface
     */
    public function getDevices(): array
    {
        $nonce = $this->createNonce();
        $timestamp = $this->createTimestamp();
        $signature = $this->generateSignature($nonce, $timestamp, []);
        $url = 'https://api-e.ecoflow.com/iot-open/sign/device/list';
        $headers = [
            'accessKey' => $this->accessKey,
            'Content-Type' => 'application/json',
            'nonce' => $nonce,
            'sign' => $signature,
            'timestamp' => $timestamp,
        ];

        /**
         * @var array{
         *       code: string,
         *       message?: string,
         *       data: array<int, array{
         *           sn?: string,
         *           deviceName?: string,
         *           online?: bool,
         *       }>,
         *       eagleEyeTraceId: string,
         *       tid: string
         *   } $return
         */
        $return = $this->makeRequest($url, 'GET', $headers);

        return $return;
    }


    /**
     * Retrieves the certification information for the application from the EcoFlow API.
     *
     * This function generates necessary security parameters (nonce, timestamp, and signature) and makes a GET request to
     * the EcoFlow API endpoint to retrieve the certification information. The retrieved data includes the certificate
     * account, password, URL, port, and protocol, which are likely used for establishing an MQTT connection with the
     * EcoFlow API.
     *
     * @return array{
     *     code: string,
     *     message?: string,
     *     data: array{
     *      certificateAccount: string,
     *      certificatePassword: string,
     *      url: string,
     *      port: string,
     *      protocol: string
     *     },
     *     eagleEyeTraceId: string,
     *     tid: string
     * }
     *
     * @psalm-suppress PossiblyUnusedMethod
     *
     * @throws DecodingExceptionInterface|Exception|RandomException|TransportExceptionInterface
     */
    public function getAppCertification(): array
    {
        $nonce = $this->createNonce();
        $timestamp = $this->createTimestamp();
        $signature = $this->generateSignature($nonce, $timestamp, []);
        $url = 'https://api-e.ecoflow.com/iot-open/sign/certification';

        $headers = [
            'accessKey' => $this->accessKey,
            'Content-Type' => 'application/json',
            'nonce' => $nonce,
            'sign' => $signature,
            'timestamp' => $timestamp,
        ];

        /**
         * @var array{
         *      code: string,
         *      message?: string,
         *      data: array{
         *       certificateAccount: string,
         *       certificatePassword: string,
         *       url: string,
         *       port: string,
         *       protocol: string
         *      },
         *      eagleEyeTraceId: string,
         *      tid: string
         *  } $return
         */
        $return = $this->makeRequest($url, 'GET', $headers);

        return $return;
    }


    /**
     * Generates a random nonce.
     *
     * This method generates a random nonce for the EcoFlow API. A nonce is a random string that is used once in each
     * request to prevent replay attacks. The nonce is generated as a random integer between 100000 and 999999, which is
     * then converted to a string.
     *
     * The purpose of the nonce is to ensure the uniqueness and integrity of each API request by including a one-time,
     * randomly generated value. This helps to protect against duplicate or replayed requests.
     *
     * The method utilises PHP's built-in `random_int()` function to generate a cryptographically secure random integer
     * within the specified range. The generated integer is then cast to a string to be included in the API request.
     *
     * @return string The randomly generated nonce as a string.
     *
     * @throws RandomException If an error occurs during the generation of the random integer, such as a failure of the
     *                         random number generator or an invalid range.
     */
    private function createNonce(): string
    {
        return (string) random_int(100000, 999999);
    }


    /**
     * Generates a timestamp in milliseconds.
     *
     * This method generates a timestamp for use in the EcoFlow API. The timestamp is created by instantiating a
     * DateTime object with the current time in the UTC time zone. The DateTime object is then formatted to include
     * microseconds using the format string 'U.u'. The formatted time is multiplied by 1000 to convert it to
     * milliseconds and rounded to the nearest whole number.
     *
     * The generated timestamp is used as part of the authentication process when making requests to the EcoFlow API.
     * It ensures that the timestamp is based on a standardised time reference and is not affected by local time
     * differences, making it suitable for use in a distributed system.
     *
     * @return string The generated timestamp as a string representation of the current time in milliseconds.
     *
     * @throws Exception If an error occurs during the creation of the DateTime object or when formatting the time.
     *                   The calling code should handle this exception appropriately.
     */
    private function createTimestamp(): string
    {
        $dateTime = new DateTime((string) null, new DateTimeZone('UTC'));
        $formatted = (int) $dateTime->format('U.u');

        return (string) round($formatted * 1000);
    }
}
